// Seperate the pizza qualities from what can be done to the pizza via classes.
// work in progress  -- not right. Just jotting down. 

public static class Order {
  private boolean pineapple;
  private String size;
  private String crust;
  private String style;
  // add other Order vars

  private Pizza(OrderService os) {
    this.size = os.size;
    this.crust = os.crust;
    this.style = os.style;
    this.pineapple = os.pineapple;
  } 
  
  private Wings(OrderService os) {
    // will inherit Order variables that apply to Wings 
  }
  
  public static class OrderService {
    private String size;
    private String crust;
    private String style;    
    
    setSize(String s) {}
    setPineapple(boolean pine) {}
    //setters to build items
    
    MenuItem build() {
      return new MenuItem(this);
    }
  }

  public static void main(String[] args) {
  
    List<> order = new ArrayList<>();                    // Declared with no Type so should take various Objects?
    order = order.add.MenuItem.Pizza                     // append/add/put for ArrayList?
                              .setSize("Small")
                              .setCrust("Thin")
                              .addTopping("Pineapple")
                              .build();
  }
}



// When an order gets finalized the entire order
// should be a new HashMap entry where <K, V> is 
// <CustomerInformation, OrderInformation>. 

// Kitchen "Makeline" screen would immediately enqueue the order info.
// Chef would dequeue the items via controller as he finished them. 

// Once the values from an entire map entry are dequeued,
// the entry information is formatted to be printed onto a ticket. 
